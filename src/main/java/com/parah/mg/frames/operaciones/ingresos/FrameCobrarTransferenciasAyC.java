/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.parah.mg.frames.operaciones.ingresos;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import com.parah.mg.domain.TblAsientos;
import com.parah.mg.domain.TblAsientosTemporales;
import com.parah.mg.domain.TblCuentasContablesPorDefecto;
import com.parah.mg.domain.TblEventoDetalle;
import com.parah.mg.domain.TblEventoTipos;
import com.parah.mg.domain.TblRecibos;
import com.parah.mg.domain.TblTransferencias;
import com.parah.mg.domain.miembros.TblEntidades;
import com.parah.mg.domain.models.PagosMensualesPendientes;
import com.parah.mg.utils.CurrentUser;
import com.parah.mg.utils.Utils;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.Beans;
import java.time.LocalDate;
import static java.time.temporal.TemporalAdjusters.lastDayOfMonth;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import net.coderazzi.filters.gui.AutoChoices;
import net.coderazzi.filters.gui.TableFilterHeader;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Industria
 */
public class FrameCobrarTransferenciasAyC extends JInternalFrame implements TableModelListener {

    private static final Logger LOGGER = LogManager.getLogger(FrameCobrarTransferenciasAyC.class);
    CurrentUser currentUser = CurrentUser.getInstance();
    Map<String, String> persistenceMap = new HashMap<>();
    TblCuentasContablesPorDefecto cuentasContablesPorDefecto;
    DatePickerSettings datePickerSettings = new DatePickerSettings(Locale.getDefault());

    public FrameCobrarTransferenciasAyC() {
        super("Cobrar Aportes y Colectas",
                true, //resizable
                true, //closable
                true, //maximizable
                true);//iconifiable
        persistenceMap = Utils.getInstance().getPersistenceMap();
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }

        datePickerSettings.setFormatForDatesCommonEra("dd/MM/yyyy");

        cuentasContablesPorDefecto = entityManager.find(TblCuentasContablesPorDefecto.class, 1);

        cboEventoTipo.setSelectedIndex(-1);

        TableFilterHeader filterHeader = new TableFilterHeader(masterTable, AutoChoices.DISABLED);
        filterHeader.setAdaptiveChoices(false);
        filterHeader.getParserModel().setIgnoreCase(true);
        filterHeader.setPosition(TableFilterHeader.Position.TOP);

        Action marcarCobrado = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (masterTable.getSelectedRowCount() > 0) {

                }
            }
        };
        masterTable.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, InputEvent.CTRL_MASK),
                "marcarCobrado");
        masterTable.getActionMap().put("marcarCobrado",
                marcarCobrado);

        masterTable.getModel().addTableModelListener(this);
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        try {
            Integer suma = 0;
            for (PagosMensualesPendientes pago : list) {
                if (pago.getCobrado()) {
                    suma += pago.getMontoTotal();
                }
            }
            lblTotal.setText(String.format("%(,d", suma));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, Thread.currentThread().getStackTrace()[1].getMethodName() + " - " + ex.getMessage());
            LOGGER.error(Thread.currentThread().getStackTrace()[1].getMethodName(), ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : Persistence.createEntityManagerFactory("mg_PU", persistenceMap).createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TblEventoDetalle t WHERE t.id = null");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        queryMiembros = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TblEntidades t ORDER BY t.apellidos, t.nombres");
        listMiembros = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(queryMiembros.getResultList());
        dateToStringConverter1 = new com.parah.mg.utils.DateToStringConverter();
        dateTableCellRenderer1 = new com.parah.mg.utils.DateTimeTableCellRenderer();
        numberCellRenderer1 = new com.parah.mg.utils.NumberCellRenderer();
        integerLongConverter1 = new com.parah.mg.utils.IntegerLongConverter();
        queryEventos = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TblEventos t WHERE t.idGrupo IN :grupos ORDER BY t.fecha");
        queryEventos.setParameter("grupos", currentUser.getUser().getTblGruposList());
        listEventos = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(queryEventos.getResultList());
        queryEventoTipos = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TblEventoTipos t where t.id != 1");
        listEventoTipos = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(queryEventoTipos.getResultList());
        ctaCteTableCellRenderer1 = new com.parah.mg.utils.CtaCteTableCellRenderer();
        mesTableCellRenderer1 = new com.parah.mg.utils.MesTableCellRenderer();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        cboEventoTipo = new javax.swing.JComboBox();
        descripcionLabel3 = new javax.swing.JLabel();
        cboMarcarSeleccionados = new javax.swing.JButton();
        descripcionLabel4 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        descripcionLabel5 = new javax.swing.JLabel();
        dtpFechaCobro = new DatePicker(datePickerSettings);

        FormListener formListener = new FormListener();

        dateTableCellRenderer1.setText("dateTableCellRenderer1");

        numberCellRenderer1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numberCellRenderer1.setText("numberCellRenderer1");

        ctaCteTableCellRenderer1.setText("ctaCteTableCellRenderer1");

        mesTableCellRenderer1.setText("mesTableCellRenderer1");

        addInternalFrameListener(formListener);

        masterTable.setAutoCreateRowSorter(true);
        masterTable.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidad.ctacte}"));
        columnBinding.setColumnName("Cta Cte");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${entidad.nombreCompleto}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${montoTotal}"));
        columnBinding.setColumnName("Monto");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${mes}"));
        columnBinding.setColumnName("Mes");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ano}"));
        columnBinding.setColumnName("AÃ±o");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cobrado}"));
        columnBinding.setColumnName("Cobrado");
        columnBinding.setColumnClass(Boolean.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterScrollPane.setViewportView(masterTable);
        if (masterTable.getColumnModel().getColumnCount() > 0) {
            masterTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            masterTable.getColumnModel().getColumn(0).setCellRenderer(ctaCteTableCellRenderer1);
            masterTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            masterTable.getColumnModel().getColumn(2).setCellRenderer(numberCellRenderer1);
            masterTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            masterTable.getColumnModel().getColumn(3).setCellRenderer(mesTableCellRenderer1);
            masterTable.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        saveButton.setText("Guardar");
        saveButton.addActionListener(formListener);

        refreshButton.setText("Cancelar");
        refreshButton.addActionListener(formListener);

        cboEventoTipo.setEditable(true);
        cboEventoTipo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listEventoTipos, cboEventoTipo);
        bindingGroup.addBinding(jComboBoxBinding);

        cboEventoTipo.addActionListener(formListener);

        descripcionLabel3.setText("Tipo de Evento:");

        cboMarcarSeleccionados.setText("Marcar como cobrado a las filas seleccionadas");
        cboMarcarSeleccionados.addActionListener(formListener);

        descripcionLabel4.setText("Fecha de Cobro:");

        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        lblTotal.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(102, 102, 102));

        descripcionLabel5.setText("Importe total de Registros marcados:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(descripcionLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboEventoTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cboMarcarSeleccionados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(refreshButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descripcionLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(descripcionLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dtpFechaCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {refreshButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descripcionLabel3)
                    .addComponent(cboEventoTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(descripcionLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dtpFechaCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descripcionLabel4))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(refreshButton)
                    .addComponent(cboMarcarSeleccionados))
                .addContainerGap())
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, javax.swing.event.InternalFrameListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == saveButton) {
                FrameCobrarTransferenciasAyC.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                FrameCobrarTransferenciasAyC.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == cboEventoTipo) {
                FrameCobrarTransferenciasAyC.this.cboEventoTipoActionPerformed(evt);
            }
            else if (evt.getSource() == cboMarcarSeleccionados) {
                FrameCobrarTransferenciasAyC.this.cboMarcarSeleccionadosActionPerformed(evt);
            }
        }

        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            if (evt.getSource() == FrameCobrarTransferenciasAyC.this) {
                FrameCobrarTransferenciasAyC.this.formInternalFrameActivated(evt);
            }
        }

        public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            for (PagosMensualesPendientes pago : list) {
                if (pago.getCobrado()) {

                    TblTransferencias t = new TblTransferencias();
                    entityManager.persist(t);
                    t.setIdEntidad(pago.getEntidad());
                    t.setConcepto(((TblEventoTipos) cboEventoTipo.getSelectedItem()).getDescripcion() + " " + pago.getMes().toString() + "/" + pago.getAno().toString());
                    t.setMontoAporte(pago.getMontoAporte());
                    t.setMontoDonacion(pago.getMontoDonacion());
                    t.setCobrado(true);
                    /*Calendar c = Calendar.getInstance();
                    c.set(Calendar.MONTH, pago.getMes());
                    c.set(Calendar.YEAR, pago.getAno());
                    c.set(Calendar.DAY_OF_MONTH, 1);
                    c.add(Calendar.DATE, -1);
                    LocalDateTime date = c.getTime();
                    t.setFechahoraCompromiso(date);*/
                    LocalDate primerDiaDelMes = LocalDate.of(pago.getAno(), pago.getMes(), 1);
                    t.setFechahoraCompromiso(primerDiaDelMes.with(lastDayOfMonth()));
                    t.setFechahora(dtpFechaCobro.getDate());
                    t.setIdEventoTipo((TblEventoTipos) cboEventoTipo.getSelectedItem());
                    t.setIdUser(currentUser.getUser());

                    Query queryEvd = entityManager.createQuery("SELECT t FROM TblEventoDetalle t "
                            + "WHERE t.idEntidad = :entidad"
                            + " AND t.idEvento.idEventoTipo = :eventoTipo"
                            + " AND EXTRACT(MONTH FROM t.idEvento.fecha) = " + pago.getMes().toString()
                            + " AND EXTRACT(YEAR FROM t.idEvento.fecha) = " + pago.getAno().toString());
                    queryEvd.setParameter("entidad", pago.getEntidad());
                    queryEvd.setParameter("eventoTipo", t.getIdEventoTipo());
                    List<TblEventoDetalle> listEvd = (List<TblEventoDetalle>) queryEvd.getResultList();
                    List<TblAsientos> listAsientos = new ArrayList<>();
                    for (TblEventoDetalle evd : listEvd) {
                        listAsientos.addAll(evd.getTblAsientosList());
                    }

                    Query queryTransferenciasAnteriores = entityManager.createQuery("SELECT t FROM TblTransferencias t "
                            + "WHERE t.idEntidad = :entidad"
                            + " AND t.idEventoTipo = :eventoTipo"
                            + " AND EXTRACT(MONTH FROM t.fechahoraCompromiso) = " + pago.getMes().toString()
                            + " AND EXTRACT(YEAR FROM t.fechahoraCompromiso) = " + pago.getAno().toString());
                    queryTransferenciasAnteriores.setParameter("entidad", pago.getEntidad());
                    queryTransferenciasAnteriores.setParameter("eventoTipo", t.getIdEventoTipo());
                    List<TblTransferencias> listTransferenciasAnteriores = (List<TblTransferencias>) queryTransferenciasAnteriores.getResultList();

                    for (TblTransferencias tAnterior : listTransferenciasAnteriores) {
                        if (tAnterior != t) {
                            for (TblAsientosTemporales atAnterior : tAnterior.getTblAsientosTemporalesList()) {
                                for (TblAsientos asiento : listAsientos) {
                                    if (atAnterior.getIdCentroDeCosto().equals(asiento.getIdCentroDeCosto())
                                            && atAnterior.getIdCuentaContableDebe().equals(asiento.getIdCentroDeCosto().getIdCuentaContableCtaCtePorDefecto())
                                            && atAnterior.getIdCuentaContableHaber().equals(asiento.getIdCuentaContableDebe())
                                            && atAnterior.getMonto().equals(asiento.getMonto())) {
                                        listAsientos.remove(asiento);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    List<TblAsientosTemporales> listAsientosTemporales = t.getTblAsientosTemporalesList();
                    if (listAsientosTemporales == null) {
                        listAsientosTemporales = new LinkedList<>();
                        t.setTblAsientosTemporalesList(listAsientosTemporales);
                    }

                    for (TblAsientos asiento : listAsientos) {
                        TblAsientosTemporales aT = new TblAsientosTemporales();
                        entityManager.persist(aT);
                        aT.setFacturado(false);
                        aT.setFechahora(t.getFechahora().atStartOfDay());
                        aT.setIdCentroDeCosto(asiento.getIdCentroDeCosto());
                        aT.setIdCuentaContableDebe(asiento.getIdCentroDeCosto().getIdCuentaContableCtaCtePorDefecto());
                        aT.setIdCuentaContableHaber(asiento.getIdCuentaContableDebe());
                        if (asiento.getIdCuentaContableHaber().equals(cuentasContablesPorDefecto.getIdCuentaAportes())) {
                            aT.setEsAporte(true);
                        } else {
                            aT.setEsAporte(false);
                        }
                        aT.setMonto(asiento.getMonto());

                        listAsientosTemporales.add(aT);

                    }

                    if (t.getTblAsientosTemporalesList().stream().mapToInt(x -> x.getMonto()).sum() != t.getMontoTotal()) {
                        JOptionPane.showMessageDialog(null, "Error de consistencia de importes. Transferencia no guardada.");
                        entityManager.remove(t);
                    }
                }
            }
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
            refresh();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, Thread.currentThread().getStackTrace()[1].getMethodName() + " - " + ex.getMessage());
            LOGGER.error(Thread.currentThread().getStackTrace()[1].getMethodName(), ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private Integer findAsientoTemporal(List<TblAsientosTemporales> listAsientosTemporales, TblAsientosTemporales at) {

        return -1;
    }

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

    }//GEN-LAST:event_formInternalFrameActivated

    private void cboEventoTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboEventoTipoActionPerformed
        try {
            refresh();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, Thread.currentThread().getStackTrace()[1].getMethodName() + " - " + ex.getMessage());
            LOGGER.error(Thread.currentThread().getStackTrace()[1].getMethodName(), ex);
        }
    }//GEN-LAST:event_cboEventoTipoActionPerformed

    private void cboMarcarSeleccionadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMarcarSeleccionadosActionPerformed
        try {
            int[] selectedRows = masterTable.getSelectedRows();
            for (Integer i = 0; i < selectedRows.length; i++) {
                //list.get(i).setCobrado(true);
                masterTable.setValueAt(true, selectedRows[i], 5);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, Thread.currentThread().getStackTrace()[1].getMethodName() + " - " + ex.getMessage());
            LOGGER.error(Thread.currentThread().getStackTrace()[1].getMethodName(), ex);
        }
    }//GEN-LAST:event_cboMarcarSeleccionadosActionPerformed

    void refresh() {
        try {
            if (cboEventoTipo.getSelectedItem() != null && entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
                entityManager.getTransaction().begin();
                /*SELECT new com.parah.mg.domain.models.PagosMensualesPendientes(e,
                 EXTRACT(MONTH FROM ed.fechahora),
                 EXTRACT(YEAR FROM ed.fechahora),
                 SUM(ed.monto*ed.idEvento.porcentajeAporte/100),
                 SUM(ed.monto*(100-ed.idEvento.porcentajeAporte)/100))
                 FROM TblEntidades e,
                 (TblEventoDetalle ed), TblTransferencias t
                 WHERE e.id = ed.idEntidad.id AND e.id = t.idEntidad.id
                 AND ed.idEvento.idEventoTipo = :tipoEventoId
                 AND t.idEvento.idEventoTipo = :tipoEventoId
                 AND SUM(t.monto) <> SUM(ed.monto)
                 GROUP BY e, EXTRACT(MONTH FROM ed.fechahora),
                 EXTRACT(YEAR FROM ed.fechahora),
                 EXTRACT(MONTH FROM t.fechahora),
                 EXTRACT(YEAR FROM t.fechahora) ORDER BY e.ctacte

                 query = entityManager.createNativeQuery("SELECT eventodetalle.id, "
                 + " eventodetalle.nombres, "
                 + "    eventodetalle.apellidos, "
                 + "    eventodetalle.RAZON_SOCIAL, "
                 + "    eventodetalle.RUC_SIN_DV, "
                 + "    eventodetalle.ctacte, "
                 + "    eventodetalle.domicilio, "
                 + "    eventodetalle.box, "
                 + "    eventodetalle.id_forma_de_pago_preferida, "
                 + "   eventodetalle.IS_MIEMBRO_ACTIVO, "
                 + "   eventodetalle.ID_FORMA_DE_PAGO_PREFERIDA, "
                 + "   eventodetalle.APORTE_MENSUAL, "
                 + "   eventodetalle.ID_ENTIDAD_PAGANTE_APORTES, "
                 + "   eventodetalle.FECHA_NACIMIENTO, "
                 + "   eventodetalle.FECHA_BAUTISMO, "
                 + "   eventodetalle.FECHA_ENTRADA_CONGREGACION, "
                 + "   eventodetalle.FECHA_SALIDA_CONGREGACION, "
                 + "   eventodetalle.FECHA_DEFUNCION, "
                 + "   eventodetalle.ID_AREA_SERVICIO_EN_IGLESIA, "
                 + "   eventodetalle.ID_MIEMBROS_CATEGORIA_DE_PAGO, "
                 + "   eventodetalle.ID_MIEMBROS_ALERGIA, "
                 + "    eventodetalle.id_user,"
                 + "    eventodetalle.mes, "
                 + "    eventodetalle.ano, "
                 + "    eventodetalle.montoAporte, "
                 + "    eventodetalle.montoDonacion "
                 + " FROM "
                 + "        (SELECT m.*, "
                 + "            MONTH(rd.fechahora), "
                 + "            YEAR(rd.fechahora), "
                 + "            SUM(rd.monto*rd.porcentajeAporte/100) AS montoAporte,"
                 + "            SUM(rd.monto*(100-rd.porcentajeAporte)/100) AS montoDonacion"
                 + "         FROM TBL_ENTIDADES m "
                 + "            LEFT JOIN (SELECT * FROM MG.TBL_EVENTO_DETALLE ed LEFT JOIN MG.TBL_EVENTOS ev ON ed.ID_EVENTO = ev.ID WHERE ev.ID_EVENTO_TIPO = 1) rd"
                 + "            ON m.id = rd.ID_ENTIDAD "
                 + "            group by m.id, m.nombres, m.apellidos, m.RAZON_SOCIAL, m.RUC_SIN_DV, m.ctacte, m.domicilio, m.box, m.aporte_mensual, m.id_user, m.id_forma_de_pago_preferida, "
                 + "             m.ID_ENTIDAD_PAGANTE_APORTES, "
                 + "             m.IS_MIEMBRO_ACTIVO, "
                 + "             m.ID_FORMA_DE_PAGO_PREFERIDA, "
                 + "             m.APORTE_MENSUAL, "
                 + "             m.FECHA_NACIMIENTO, "
                 + "             m.FECHA_BAUTISMO, "
                 + "             m.FECHA_ENTRADA_CONGREGACION, "
                 + "             m.FECHA_SALIDA_CONGREGACION, "
                 + "             m.FECHA_DEFUNCION, "
                 + "             m.ID_AREA_SERVICIO_EN_IGLESIA, "
                 + "             m.ID_MIEMBROS_CATEGORIA_DE_PAGO, "
                 + "             m.ID_MIEMBROS_ALERGIA) eventodetalle, "
                 + "        (SELECT m.*, "
                 + "             MONTH(p.fechahora), "
                 + "             YEAR(p.fechahora), "
                 + "             COALESCE(SUM(p.monto),0)*p.porcentajeAporte/100) AS montoAporte, "
                 + "             COALESCE(SUM(p.monto),0)*(100-p.porcentajeAporte)/100) AS montoDonacion, "
                 + "             FROM TBL_ENTIDADES m "
                 + "             LEFT JOIN (SELECT * FROM MG.TBL_TRANSFERENCIAS WHERE ID_EVENTO_TIPO = 1) p ON m.id = p.ID_ENTIDAD "
                 + "             group by m.id, m.nombres, m.apellidos, m.RAZON_SOCIAL, m.RUC_SIN_DV, m.ctacte, m.domicilio, m.box, m.aporte_mensual, m.id_user, m.id_forma_de_pago_preferida, "
                 + "             m.IS_MIEMBRO_ACTIVO, "
                 + "             m.ID_ENTIDAD_PAGANTE_APORTES, "
                 + "             m.ID_FORMA_DE_PAGO_PREFERIDA, "
                 + "             m.APORTE_MENSUAL, "
                 + "             m.FECHA_NACIMIENTO, "
                 + "             m.FECHA_BAUTISMO, "
                 + "             m.FECHA_ENTRADA_CONGREGACION, "
                 + "             m.FECHA_SALIDA_CONGREGACION, "
                 + "             m.FECHA_DEFUNCION, "
                 + "             m.ID_AREA_SERVICIO_EN_IGLESIA, "
                 + "             m.ID_MIEMBROS_CATEGORIA_DE_PAGO, "
                 + "             m.ID_MIEMBROS_ALERGIA) transferencias, "
                 + "        (SELECT m.*, "
                 + "             MONTH(p.fechahora), "
                 + "             YEAR(p.fechahora), "
                 + "             COALESCE(SUM(p.monto),0)*p.porcentajeAporte/100) AS montoAporte, "
                 + "             COALESCE(SUM(p.monto),0)*(100-p.porcentajeAporte)/100) AS montoDonacion, "
                 + "             FROM TBL_ENTIDADES m "
                 + "             LEFT JOIN (SELECT * FROM MG.TBL_RECIBOS WHERE ID_EVENTO_TIPO = 1) p ON m.id = p.ID_ENTIDAD "
                 + "             group by m.id, m.nombres, m.apellidos, m.RAZON_SOCIAL, m.RUC_SIN_DV, m.ctacte, m.domicilio, m.box, m.aporte_mensual, m.id_user, m.id_forma_de_pago_preferida, "
                 + "             m.IS_MIEMBRO_ACTIVO, "
                 + "             m.ID_FORMA_DE_PAGO_PREFERIDA, "
                 + "             m.APORTE_MENSUAL, "
                 + "             m.ID_ENTIDAD_PAGANTE_APORTES, "
                 + "             m.FECHA_NACIMIENTO, "
                 + "             m.FECHA_BAUTISMO, "
                 + "             m.FECHA_ENTRADA_CONGREGACION, "
                 + "             m.FECHA_SALIDA_CONGREGACION, "
                 + "             m.FECHA_DEFUNCION, "
                 + "             m.ID_AREA_SERVICIO_EN_IGLESIA, "
                 + "             m.ID_MIEMBROS_CATEGORIA_DE_PAGO, "-
                 + "             m.ID_MIEMBROS_ALERGIA) recibos "
                 + "             WHERE eventodetalle.id = transferencias.id AND eventodetalle.id = recibos.id AND (eventodetalle.monto - transferencias.monto - recibos.monto) > 0 "
                 + "   ORDER BY eventodetalle.ctacte");*/

 /*query = entityManager.createNativeQuery("SELECT eventodetalle.id,"
                        + "                             eventodetalle.ctacte,"
                        + "                             eventodetalle.mes,"
                        + "                             eventodetalle.ano,"
                        + "                             eventodetalle.montoAporte - transferencias.montoAporte - recibos.montoAporte,"
                        + "                             eventodetalle.montoDonacion - transferencias.montoDonacion - recibos.montoDonacion"
                        + "                          FROM"
                        + "                                 (SELECT m.id, m.ctacte,"
                        + "                                     MONTH(rd.FECHA) AS MES,"
                        + "                                     YEAR(rd.FECHA) AS ANO,"
                        + "                                     SUM(rd.monto*rd.PORCENTAJE_APORTE/100) AS montoAporte,"
                        + "                                     SUM(rd.monto*(100-rd.PORCENTAJE_APORTE)/100) AS montoDonacion"
                        + "                                  FROM TBL_ENTIDADES m"
                        + "                                     LEFT JOIN (SELECT ed.*, ev.* FROM MG.TBL_EVENTO_DETALLE ed LEFT JOIN MG.TBL_EVENTOS ev ON ed.ID_EVENTO = ev.ID WHERE ev.ID_EVENTO_TIPO = " + ((TblEventoTipos) cboEventoTipo.getSelectedItem()).getId().toString() + ") rd"
                        + "                                     ON m.id = rd.ID_ENTIDAD"
                        + "                                     group by m.id, m.ctacte, MONTH(rd.FECHA), YEAR(rd.FECHA)) eventodetalle,"
                        + "                                 (SELECT m.id, m.ctacte,"
                        + "                                      MONTH(p.fechahora) AS MES,"
                        + "                                      YEAR(p.fechahora) AS ANO,"
                        + "                                      COALESCE(SUM(p.MONTO_APORTE),0) AS montoAporte,"
                        + "                                      COALESCE(SUM(p.MONTO_DONACION),0) AS montoDonacion"
                        + "                                      FROM TBL_ENTIDADES m"
                        + "                                      LEFT JOIN (SELECT * FROM MG.TBL_TRANSFERENCIAS WHERE ID_EVENTO_TIPO = " + ((TblEventoTipos) cboEventoTipo.getSelectedItem()).getId().toString() + ") p ON m.id = p.ID_ENTIDAD"
                        + "                                      group by m.id, m.ctacte, MONTH(p.FECHAHORA), YEAR(p.FECHAHORA)) transferencias,"
                        + "                                 (SELECT m.id, m.ctacte,"
                        + "                                      MONTH(p.fechahora) AS MES,"
                        + "                                      YEAR(p.fechahora) AS ANO,"
                        + "                                      COALESCE(SUM(p.MONTO_APORTE),0) AS montoAporte,"
                        + "                                      COALESCE(SUM(p.MONTO_DONACION),0) AS montoDonacion"
                        + "                                      FROM TBL_ENTIDADES m"
                        + "                                      LEFT JOIN (SELECT * FROM MG.TBL_RECIBOS WHERE ID_EVENTO_TIPO = " + ((TblEventoTipos) cboEventoTipo.getSelectedItem()).getId().toString() + ") p ON m.id = p.ID_ENTIDAD"
                        + "                                      group by m.id, m.ctacte, MONTH(p.FECHAHORA), YEAR(p.FECHAHORA)) recibos"
                        + "                                      WHERE eventodetalle.id = transferencias.id AND eventodetalle.id = recibos.id AND (eventodetalle.montoAporte - transferencias.montoAporte - recibos.montoAporte + eventodetalle.montoDonacion - transferencias.montoDonacion - recibos.montoDonacion) > 0"
                        + "                            ORDER BY eventodetalle.ctacte");*/
                //" + ((TblEventoTipos) cboEventoTipo.getSelectedItem()).getId().toString() + "
                query = entityManager.createNativeQuery("SELECT * FROM (SELECT e.ID, e.CTACTE, DETALLE.mes, DETALLE.ano, SUM(DETALLE.MONTOAPORTE) AS MONTOAPORTE, SUM(DETALLE.MONTODONACION) AS MONTODONACION FROM"
                        + "(SELECT ed.id_entidad,"
                        + "                MONTH(ev.FECHA) AS mes,"
                        + "                YEAR(ev.FECHA) AS ano,"
                        + "                SUM(CAST(ed.monto*(CAST(ev.PORCENTAJE_APORTE AS FLOAT)/100) AS INTEGER)) AS montoAporte,"
                        + "                SUM(CAST(ed.monto*(CAST(100-ev.PORCENTAJE_APORTE AS FLOAT)/100) AS INTEGER)) AS montoDonacion"
                        + "              FROM MG.TBL_EVENTO_DETALLE ed LEFT JOIN MG.TBL_EVENTOS ev ON ed.ID_EVENTO = ev.ID WHERE ev.ID_EVENTO_TIPO = " + ((TblEventoTipos) cboEventoTipo.getSelectedItem()).getId().toString()
                        + "                group by MONTH(ev.FECHA), YEAR(ev.FECHA), ed.id_entidad"
                        + " UNION ALL  "
                        + " SELECT p.id_entidad,"
                        + "                 MONTH(p.fechahora_compromiso) AS mes,"
                        + "                 YEAR(p.fechahora_compromiso) AS ano,"
                        + "                 -SUM(p.MONTO_APORTE) AS montoAporte,"
                        + "                 -SUM(p.MONTO_DONACION) AS montoDonacion"
                        + "                 FROM MG.TBL_TRANSFERENCIAS p WHERE p.ID_EVENTO_TIPO = " + ((TblEventoTipos) cboEventoTipo.getSelectedItem()).getId().toString()
                        + "                 group by YEAR(p.FECHAHORA_COMPROMISO), MONTH(p.FECHAHORA_COMPROMISO), p.id_entidad"
                        + " UNION ALL "
                        + " SELECT p.id_entidad,"
                        + "        MONTH(p.fechahora_compromiso) AS mes,"
                        + "        YEAR(p.fechahora_compromiso) AS ano,"
                        + "        -SUM(p.MONTO_APORTE) AS montoAporte,"
                        + "        -SUM(p.MONTO_DONACION) AS montoDonacion"
                        + "        FROM MG.TBL_RECIBOS p WHERE p.ID_EVENTO_TIPO = " + ((TblEventoTipos) cboEventoTipo.getSelectedItem()).getId().toString()
                        + "        group by YEAR(p.FECHAHORA_COMPROMISO), MONTH(p.FECHAHORA_COMPROMISO), p.id_entidad) DETALLE LEFT JOIN MG.TBL_ENTIDADES e ON DETALLE.ID_ENTIDAD = e.ID"
                        + " GROUP BY e.ID, e.CTACTE, e.APELLIDOS, e.NOMBRES, DETALLE.ano, DETALLE.mes) d"
                        + " WHERE MONTODONACION + MONTOAPORTE > 0"
                        + " ORDER BY CTACTE");

                List<Object[]> data = queryMiembros.getResultList();
                listMiembros.clear();
                listMiembros.addAll(data);

                List<Object[]> dataO = query.getResultList();
                list.clear();

                for (Object[] o : dataO) {
                    PagosMensualesPendientes p = new PagosMensualesPendientes();
                    p.setEntidad(entityManager.find(TblEntidades.class, o[0]));
                    p.setMes((Integer) o[2]);
                    p.setAno((Integer) o[3]);
                    p.setMontoAporte((Integer) o[4]);
                    p.setMontoDonacion((Integer) o[5]);
                    p.setCobrado(false);
                    list.add(p);
                }
                if (list.size() > 0) {
                    /*Calendar c = Calendar.getInstance();
                    c.set(Calendar.MONTH, list.get(0).getMes());
                    c.set(Calendar.YEAR, list.get(0).getAno());
                    c.set(Calendar.DAY_OF_MONTH, 1);
                    c.add(Calendar.DATE, -1);
                    LocalDateTime date = c.getTime();
                    dtpFechaCobro.setDate(date);*/
                    LocalDate primerDiaDelMes = LocalDate.of(list.get(0).getAno(), list.get(0).getMes(), 1);
                    dtpFechaCobro.setDate((primerDiaDelMes.with(lastDayOfMonth())));
                }

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, Thread.currentThread().getStackTrace()[1].getMethodName() + " - " + ex.getMessage());
            LOGGER.error(Thread.currentThread().getStackTrace()[1].getMethodName(), ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboEventoTipo;
    private javax.swing.JButton cboMarcarSeleccionados;
    private com.parah.mg.utils.CtaCteTableCellRenderer ctaCteTableCellRenderer1;
    private com.parah.mg.utils.DateTimeTableCellRenderer dateTableCellRenderer1;
    private com.parah.mg.utils.DateToStringConverter dateToStringConverter1;
    private javax.swing.JLabel descripcionLabel3;
    private javax.swing.JLabel descripcionLabel4;
    private javax.swing.JLabel descripcionLabel5;
    private com.github.lgooddatepicker.components.DatePicker dtpFechaCobro;
    private javax.persistence.EntityManager entityManager;
    private com.parah.mg.utils.IntegerLongConverter integerLongConverter1;
    private javax.swing.JLabel lblTotal;
    private java.util.List<com.parah.mg.domain.models.PagosMensualesPendientes> list;
    private java.util.List<com.parah.mg.domain.TblEventoTipos> listEventoTipos;
    private java.util.List<com.parah.mg.domain.TblEventos> listEventos;
    private java.util.List listMiembros;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private com.parah.mg.utils.MesTableCellRenderer mesTableCellRenderer1;
    private com.parah.mg.utils.NumberCellRenderer numberCellRenderer1;
    private javax.persistence.Query query;
    private javax.persistence.Query queryEventoTipos;
    private javax.persistence.Query queryEventos;
    private javax.persistence.Query queryMiembros;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameCobrarTransferenciasAyC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameCobrarTransferenciasAyC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameCobrarTransferenciasAyC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameCobrarTransferenciasAyC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new FrameCobrarTransferenciasAyC());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }

}
